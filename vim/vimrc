" Maintainer: RAJKUMAR BALAKRISHNAN @Rajsb_

call plug#begin()
  Plug 'scrooloose/nerdtree'
  Plug 'junegunn/fzf.vim'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
  Plug 'w0ng/vim-hybrid'
  Plug 'w0rp/ale'
  Plug 'tpope/vim-rails'
  Plug 'alvan/vim-closetag'
  Plug 'vim-scripts/Auto-Pairs'
  Plug 'tpope/vim-endwise'
  Plug 'neoclide/coc.nvim'
  Plug 'ervandew/supertab'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-repeat'
  Plug 'preservim/nerdcommenter'
call plug#end()

nmap 0 $
imap jk <esc>
imap kj <esc>

let mapleader="\<Space>"

nnoremap <leader>v :vnew <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>

syntax on
filetype on
filetype indent on

set encoding=UTF-8
set number
set title
set ruler
set cursorline
set nowrap
set expandtab
set smartindent
set autoindent
set lazyredraw
set autoread
set hlsearch
set ignorecase
set nocompatible
set smartcase
set incsearch
set tabstop=2
set shiftwidth=2
set signcolumn=yes
set history=100
set background=dark
set termguicolors


colorscheme hybrid
let g:airline_theme='minimalist'

let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync

" Goodbye netrw I hate you
let loaded_netrwPlugin = 1

" When exiting, quit both file and nerd tree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") 
      \ && b:NERDTree.isTabTree()) | q | endif

" This unsets the "last search pattern" register by hitting return
nnoremap <CR> :noh<CR><CR>

"""""""""""""""""""""""" NERDTREE """"""""""""""""""""""'

" Toggle nerdtree
nnoremap <leader>n :NERDTreeToggle<CR>

" Refresh nerd tree using leader i.e space + r
nnoremap <Leader>r :NERDTreeRefreshRoot

" Locate the focused file in the tree with <Leader> + j:
nnoremap <leader>j :NERDTreeFind<CR>


"""""""""""""""""""""" FZF """""""""""""""""""""""""""" 

nnoremap <silent> <C-p> :Files<CR>

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

"""""""""""""Auto close""""""""""""""""""""""""""""""''
" Auto close
let g:closetag_shortcut = '>'
let g:closetag_close_shortcut = '<leader>>'
let g:closetag_filenames = '*.html,*.jsx,*.js,*.tsx,*erb,*.md'
let g:closetag_xhtml_filenames = '*.html,*.jsx,*.js,*.tsx,*erb,*.md'
let g:closetag_emptyTags_caseSensitive = 1
let g:closetag_regions = {
    \ 'typescript.tsx': 'jsxRegion,tsxRegion',
    \ 'javascript.jsx': 'jsxRegion',
    \ }


" Swap ; and : This is more Convenient.
nnoremap ; :
nnoremap : ;

if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif

